// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AuthRequest struct {
	Login                string   `protobuf:"bytes,1,opt,name=login,proto3" json:"login,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Ipaddr               string   `protobuf:"bytes,3,opt,name=ipaddr,proto3" json:"ipaddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AuthRequest) Reset()         { *m = AuthRequest{} }
func (m *AuthRequest) String() string { return proto.CompactTextString(m) }
func (*AuthRequest) ProtoMessage()    {}
func (*AuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{0}
}

func (m *AuthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthRequest.Unmarshal(m, b)
}
func (m *AuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthRequest.Marshal(b, m, deterministic)
}
func (m *AuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthRequest.Merge(m, src)
}
func (m *AuthRequest) XXX_Size() int {
	return xxx_messageInfo_AuthRequest.Size(m)
}
func (m *AuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuthRequest proto.InternalMessageInfo

func (m *AuthRequest) GetLogin() string {
	if m != nil {
		return m.Login
	}
	return ""
}

func (m *AuthRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AuthRequest) GetIpaddr() string {
	if m != nil {
		return m.Ipaddr
	}
	return ""
}

type AuthResponse struct {
	// Types that are valid to be assigned to Response:
	//	*AuthResponse_Ok
	//	*AuthResponse_Error
	Response             isAuthResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *AuthResponse) Reset()         { *m = AuthResponse{} }
func (m *AuthResponse) String() string { return proto.CompactTextString(m) }
func (*AuthResponse) ProtoMessage()    {}
func (*AuthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{1}
}

func (m *AuthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AuthResponse.Unmarshal(m, b)
}
func (m *AuthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AuthResponse.Marshal(b, m, deterministic)
}
func (m *AuthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthResponse.Merge(m, src)
}
func (m *AuthResponse) XXX_Size() int {
	return xxx_messageInfo_AuthResponse.Size(m)
}
func (m *AuthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuthResponse proto.InternalMessageInfo

type isAuthResponse_Response interface {
	isAuthResponse_Response()
}

type AuthResponse_Ok struct {
	Ok bool `protobuf:"varint,1,opt,name=ok,proto3,oneof"`
}

type AuthResponse_Error struct {
	Error string `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*AuthResponse_Ok) isAuthResponse_Response() {}

func (*AuthResponse_Error) isAuthResponse_Response() {}

func (m *AuthResponse) GetResponse() isAuthResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *AuthResponse) GetOk() bool {
	if x, ok := m.GetResponse().(*AuthResponse_Ok); ok {
		return x.Ok
	}
	return false
}

func (m *AuthResponse) GetError() string {
	if x, ok := m.GetResponse().(*AuthResponse_Error); ok {
		return x.Error
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*AuthResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*AuthResponse_Ok)(nil),
		(*AuthResponse_Error)(nil),
	}
}

type IPFilterData struct {
	Network              string   `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Color                bool     `protobuf:"varint,2,opt,name=color,proto3" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPFilterData) Reset()         { *m = IPFilterData{} }
func (m *IPFilterData) String() string { return proto.CompactTextString(m) }
func (*IPFilterData) ProtoMessage()    {}
func (*IPFilterData) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{2}
}

func (m *IPFilterData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPFilterData.Unmarshal(m, b)
}
func (m *IPFilterData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPFilterData.Marshal(b, m, deterministic)
}
func (m *IPFilterData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPFilterData.Merge(m, src)
}
func (m *IPFilterData) XXX_Size() int {
	return xxx_messageInfo_IPFilterData.Size(m)
}
func (m *IPFilterData) XXX_DiscardUnknown() {
	xxx_messageInfo_IPFilterData.DiscardUnknown(m)
}

var xxx_messageInfo_IPFilterData proto.InternalMessageInfo

func (m *IPFilterData) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *IPFilterData) GetColor() bool {
	if m != nil {
		return m.Color
	}
	return false
}

type IPFilterResponse struct {
	Error                string   `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPFilterResponse) Reset()         { *m = IPFilterResponse{} }
func (m *IPFilterResponse) String() string { return proto.CompactTextString(m) }
func (*IPFilterResponse) ProtoMessage()    {}
func (*IPFilterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{3}
}

func (m *IPFilterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPFilterResponse.Unmarshal(m, b)
}
func (m *IPFilterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPFilterResponse.Marshal(b, m, deterministic)
}
func (m *IPFilterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPFilterResponse.Merge(m, src)
}
func (m *IPFilterResponse) XXX_Size() int {
	return xxx_messageInfo_IPFilterResponse.Size(m)
}
func (m *IPFilterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IPFilterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IPFilterResponse proto.InternalMessageInfo

func (m *IPFilterResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type IPFiltersData struct {
	Filters              []string `protobuf:"bytes,1,rep,name=filters,proto3" json:"filters,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IPFiltersData) Reset()         { *m = IPFiltersData{} }
func (m *IPFiltersData) String() string { return proto.CompactTextString(m) }
func (*IPFiltersData) ProtoMessage()    {}
func (*IPFiltersData) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{4}
}

func (m *IPFiltersData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IPFiltersData.Unmarshal(m, b)
}
func (m *IPFiltersData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IPFiltersData.Marshal(b, m, deterministic)
}
func (m *IPFiltersData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IPFiltersData.Merge(m, src)
}
func (m *IPFiltersData) XXX_Size() int {
	return xxx_messageInfo_IPFiltersData.Size(m)
}
func (m *IPFiltersData) XXX_DiscardUnknown() {
	xxx_messageInfo_IPFiltersData.DiscardUnknown(m)
}

var xxx_messageInfo_IPFiltersData proto.InternalMessageInfo

func (m *IPFiltersData) GetFilters() []string {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *IPFiltersData) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*AuthRequest)(nil), "AuthRequest")
	proto.RegisterType((*AuthResponse)(nil), "AuthResponse")
	proto.RegisterType((*IPFilterData)(nil), "IPFilterData")
	proto.RegisterType((*IPFilterResponse)(nil), "IPFilterResponse")
	proto.RegisterType((*IPFiltersData)(nil), "IPFiltersData")
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor_1b40cafcd4234784) }

var fileDescriptor_1b40cafcd4234784 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x4f, 0xc2, 0x40,
	0x10, 0x85, 0xdb, 0x12, 0xb0, 0x8e, 0xad, 0xc1, 0x0d, 0x21, 0x0d, 0x27, 0xb2, 0x07, 0xc3, 0xa9,
	0x24, 0x72, 0xf1, 0xa4, 0x29, 0x21, 0x08, 0x37, 0x53, 0x4d, 0x3c, 0x57, 0x3a, 0x6a, 0x43, 0x65,
	0xd6, 0xdd, 0x45, 0xfe, 0xbc, 0x07, 0x43, 0xb7, 0x8b, 0x95, 0x8b, 0xf1, 0xf8, 0x65, 0xe7, 0xbd,
	0x79, 0xf3, 0xb2, 0x10, 0x66, 0xa2, 0x18, 0x67, 0xa2, 0x88, 0x85, 0x24, 0x4d, 0xfc, 0x09, 0xce,
	0x92, 0xad, 0x7e, 0x4b, 0xf1, 0x63, 0x8b, 0x4a, 0xb3, 0x1e, 0xb4, 0x4b, 0x7a, 0x2d, 0x36, 0x91,
	0x3b, 0x74, 0x47, 0xa7, 0xa9, 0x01, 0x36, 0x00, 0x5f, 0x64, 0x4a, 0xed, 0x48, 0xe6, 0x91, 0x57,
	0x3d, 0x1c, 0x98, 0xf5, 0xa1, 0x53, 0x88, 0x2c, 0xcf, 0x65, 0xd4, 0xaa, 0x5e, 0x6a, 0xe2, 0x33,
	0x08, 0x8c, 0xb1, 0x12, 0xb4, 0x51, 0xc8, 0xba, 0xe0, 0xd1, 0xba, 0xb2, 0xf5, 0x17, 0x4e, 0xea,
	0xd1, 0x9a, 0xf5, 0xa1, 0x8d, 0x52, 0x92, 0x34, 0x96, 0x0b, 0x27, 0x35, 0x38, 0x05, 0xf0, 0x65,
	0xad, 0xe2, 0x37, 0x10, 0x2c, 0xef, 0xe7, 0x45, 0xa9, 0x51, 0xce, 0x32, 0x9d, 0xb1, 0x08, 0x4e,
	0x36, 0xa8, 0x77, 0x24, 0xd7, 0x75, 0x42, 0x8b, 0xfb, 0xe4, 0x2b, 0x2a, 0x6b, 0x37, 0x3f, 0x35,
	0xc0, 0x47, 0xd0, 0xb5, 0xfa, 0x43, 0x92, 0x9e, 0xdd, 0x5b, 0xdf, 0x58, 0x01, 0xbf, 0x85, 0xd0,
	0x4e, 0x2a, 0xbb, 0xea, 0xc5, 0x60, 0xe4, 0x0e, 0x5b, 0xfb, 0x55, 0x35, 0xfe, 0x18, 0x78, 0x0d,
	0x83, 0xab, 0x2f, 0x17, 0x20, 0x99, 0xce, 0x1f, 0x50, 0x7e, 0x16, 0x2b, 0x64, 0x97, 0xd0, 0x4e,
	0xca, 0x92, 0x76, 0x2c, 0x88, 0x1b, 0x05, 0x0f, 0xc2, 0xb8, 0xd9, 0x0a, 0x77, 0xf6, 0x73, 0x29,
	0x2a, 0xd4, 0x7f, 0xcd, 0x4d, 0x20, 0x4c, 0xf2, 0xfc, 0x91, 0x96, 0xc2, 0x84, 0x64, 0x61, 0xdc,
	0x6c, 0x66, 0x70, 0x11, 0x1f, 0x1f, 0xca, 0x1d, 0x76, 0x0d, 0x6c, 0x86, 0x25, 0x6a, 0x9c, 0x4b,
	0x7a, 0xff, 0x97, 0x72, 0x0c, 0xc1, 0x1d, 0x6a, 0x2b, 0x51, 0xc7, 0x9a, 0xf3, 0xf8, 0x57, 0x59,
	0xdc, 0x79, 0xee, 0x54, 0xff, 0x69, 0xf2, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x74, 0x65, 0x29, 0x6e,
	0x60, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ABFServiceClient is the client API for ABFService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ABFServiceClient interface {
	Allow(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	Reset(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	AddToIpFilter(ctx context.Context, in *IPFilterData, opts ...grpc.CallOption) (*IPFilterResponse, error)
	DeleteFromIpFilter(ctx context.Context, in *IPFilterData, opts ...grpc.CallOption) (*IPFilterResponse, error)
	GetIpFilters(ctx context.Context, in *IPFilterData, opts ...grpc.CallOption) (*IPFiltersData, error)
}

type aBFServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewABFServiceClient(cc grpc.ClientConnInterface) ABFServiceClient {
	return &aBFServiceClient{cc}
}

func (c *aBFServiceClient) Allow(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/ABFService/Allow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBFServiceClient) Reset(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, "/ABFService/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBFServiceClient) AddToIpFilter(ctx context.Context, in *IPFilterData, opts ...grpc.CallOption) (*IPFilterResponse, error) {
	out := new(IPFilterResponse)
	err := c.cc.Invoke(ctx, "/ABFService/AddToIpFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBFServiceClient) DeleteFromIpFilter(ctx context.Context, in *IPFilterData, opts ...grpc.CallOption) (*IPFilterResponse, error) {
	out := new(IPFilterResponse)
	err := c.cc.Invoke(ctx, "/ABFService/DeleteFromIpFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aBFServiceClient) GetIpFilters(ctx context.Context, in *IPFilterData, opts ...grpc.CallOption) (*IPFiltersData, error) {
	out := new(IPFiltersData)
	err := c.cc.Invoke(ctx, "/ABFService/GetIpFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ABFServiceServer is the server API for ABFService service.
type ABFServiceServer interface {
	Allow(context.Context, *AuthRequest) (*AuthResponse, error)
	Reset(context.Context, *AuthRequest) (*AuthResponse, error)
	AddToIpFilter(context.Context, *IPFilterData) (*IPFilterResponse, error)
	DeleteFromIpFilter(context.Context, *IPFilterData) (*IPFilterResponse, error)
	GetIpFilters(context.Context, *IPFilterData) (*IPFiltersData, error)
}

// UnimplementedABFServiceServer can be embedded to have forward compatible implementations.
type UnimplementedABFServiceServer struct {
}

func (*UnimplementedABFServiceServer) Allow(ctx context.Context, req *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allow not implemented")
}
func (*UnimplementedABFServiceServer) Reset(ctx context.Context, req *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (*UnimplementedABFServiceServer) AddToIpFilter(ctx context.Context, req *IPFilterData) (*IPFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToIpFilter not implemented")
}
func (*UnimplementedABFServiceServer) DeleteFromIpFilter(ctx context.Context, req *IPFilterData) (*IPFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFromIpFilter not implemented")
}
func (*UnimplementedABFServiceServer) GetIpFilters(ctx context.Context, req *IPFilterData) (*IPFiltersData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpFilters not implemented")
}

func RegisterABFServiceServer(s *grpc.Server, srv ABFServiceServer) {
	s.RegisterService(&_ABFService_serviceDesc, srv)
}

func _ABFService_Allow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFServiceServer).Allow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFService/Allow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFServiceServer).Allow(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABFService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFServiceServer).Reset(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABFService_AddToIpFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPFilterData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFServiceServer).AddToIpFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFService/AddToIpFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFServiceServer).AddToIpFilter(ctx, req.(*IPFilterData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABFService_DeleteFromIpFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPFilterData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFServiceServer).DeleteFromIpFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFService/DeleteFromIpFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFServiceServer).DeleteFromIpFilter(ctx, req.(*IPFilterData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ABFService_GetIpFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPFilterData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ABFServiceServer).GetIpFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ABFService/GetIpFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ABFServiceServer).GetIpFilters(ctx, req.(*IPFilterData))
	}
	return interceptor(ctx, in, info, handler)
}

var _ABFService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ABFService",
	HandlerType: (*ABFServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Allow",
			Handler:    _ABFService_Allow_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _ABFService_Reset_Handler,
		},
		{
			MethodName: "AddToIpFilter",
			Handler:    _ABFService_AddToIpFilter_Handler,
		},
		{
			MethodName: "DeleteFromIpFilter",
			Handler:    _ABFService_DeleteFromIpFilter_Handler,
		},
		{
			MethodName: "GetIpFilters",
			Handler:    _ABFService_GetIpFilters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
